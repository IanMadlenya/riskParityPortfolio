// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_A_double_index
Eigen::MatrixXd compute_A_double_index(const Eigen::VectorXd& w, const Eigen::MatrixXd& Sigma, const int N);
RcppExport SEXP _riskParityPortfolio_compute_A_double_index(SEXP wSEXP, SEXP SigmaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_A_double_index(w, Sigma, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_riskParityPortfolio_compute_A_double_index", (DL_FUNC) &_riskParityPortfolio_compute_A_double_index, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_riskParityPortfolio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
